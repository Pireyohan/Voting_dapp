{"version":3,"sources":["getWeb3.js","Proposal.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","on","location","reload","Proposal","className","this","props","id","description","voterCount","Component","App","state","isAdmin","isVoter","accounts","connectedAccount","workflowStatus","contract","proposals","winner","componentWillMount","eth","getAccounts","net","getId","networkId","deployedNetwork","Voting","networks","instance","Contract","abi","address","methods","owner","call","from","workflowStatusTemp","convertWorkflowStatus","getVoter","isAVoter","message","indexOf","setState","runInit","alert","error","updateWorflowStatus","updateIsVoterStatus","status","result","switchNextWorkflowStatus","startProposalsRegistering","send","endProposalsRegistering","startVotingSession","endVotingSession","tallyVotes","winningProposalID","winningproposal","getProposalWithParam","proposal","proposalToString","document","getElementById","value","voter","setVote","refreshProposalList","addVoter","addProposal","getProposal","proposalID","getOneProposal","options","fromBlock","toBlock","getPastEvents","proposalEvents","table","proposalArray","i","length","returnValues","arrayElement","push","forEach","element","isAdminRenderHello","addVoterRender","type","placeholder","onClick","getVoterRender","setVoteRender","isVoterRenderHello","addProposalRender","getProposalRender","testMap","map","refreshButton","workflowButton","showwinner","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.973d69da.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n\n    window.ethereum.on('accountsChanged', () => {\n      window.location.reload();\n    });\n\n    window.ethereum.on('chainChanged', () => {\n      window.location.reload();\n    });\n\n  });\n\nexport default getWeb3;","import React, { Component } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\";\n\nexport default class Proposal extends Component {\n  render() {\n    return(\n      <div className=\"proposal\">\n        <p>Propoal ID: {this.props.id} Description: {this.props.description} Vote Count: {this.props.voterCount} </p>\n      </div>\n    );\n  }\n}","import React, { Component } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Voting from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\nimport Proposal from './Proposal.js'\n\nclass App extends Component {\n  state = { web3: null, isAdmin: false, isVoter:false, accounts: null, connectedAccount: 0, workflowStatus:\"\", contract: null, proposals:null, winner:null};\n\n  componentWillMount = async () => {\n    try {\n      // Récupérer le provider web3\n      const web3 = await getWeb3();\n  \n      // Utiliser web3 pour récupérer les comptes de l’utilisateur (MetaMask dans notre cas) \n      const accounts = await web3.eth.getAccounts();\n\n      // Récupérer l’instance du smart contract “Whitelist” avec web3 et les informations du déploiement du fichier (client/src/contracts/Whitelist.json)\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Voting.networks[networkId];\n  \n      const instance = new web3.eth.Contract(\n        Voting.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      const owner = await instance.methods.owner().call();\n      let isAdmin = accounts[0] === owner;\n      console.log(owner);\n\n      let workflowStatusTemp = await instance.methods.workflowStatus().call({from: accounts[0]});\n      let workflowStatus = this.convertWorkflowStatus(workflowStatusTemp);\n\n      let isVoter = false;\n\n      try{\n        let isAVoter = await instance.methods.getVoter(accounts[0]).call({from: accounts[0]});\n        isVoter = isAVoter[0];\n        console.log(isAVoter[0]);\n      }\n      catch (error){\n        const stringError = error.message;\n  \n        if(stringError.indexOf(\"You're not a voter\") !== -1){\n          isVoter = false;\n        }\n      }\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, isAdmin, isVoter, accounts, connectedAccount: accounts[0], workflowStatus, contract: instance}, this.runInit);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Non-Ethereum browser detected. Can you please try to install MetaMask before starting.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runInit = async() => {\n    this.updateWorflowStatus();\n    this.updateIsVoterStatus();\n  }; \n\n  updateIsVoterStatus = async() =>{\n    const { contract, accounts} = this.state;\n\n    try{\n      let isAVoter = await contract.methods.getVoter(accounts[0]).call({from: accounts[0]});\n      this.state.isVoter = isAVoter[0];\n      console.log(isAVoter[0]);\n    }\n    catch (error){\n      const stringError = error.message;\n\n      if(stringError.indexOf(\"You're not a voter\") !== -1){\n        this.state.isVoter = false;\n      }\n    }\n    \n  }\n\n  updateWorflowStatus = async() =>{\n    const { contract, accounts} = this.state;\n    let workflowStatusTemp = await contract.methods.workflowStatus().call({from: accounts[0]});\n    console.log(\"WorkflowStatusTemp : \"+workflowStatusTemp);\n    this.state.workflowStatus = this.convertWorkflowStatus(workflowStatusTemp);\n  }\n\n  convertWorkflowStatus = (status) =>{\n    let result = \"\";\n    console.log(typeof(+status));\n    switch(+status){\n      case 0: \n        result = \"RegisteringVoters\";\n      break;\n\n      case 1: \n        result = \"ProposalsRegistrationStarted\";\n      break;\n\n      case 2: \n        result = \"ProposalsRegistrationEnded\";\n      break;\n\n      case 3: \n        result = \"VotingSessionStarted\";\n      break;\n\n      case 4: \n        result = \"VotingSessionEnded\";\n      break;\n\n      case 5: \n        result = \"VotesTallied\";\n      break;\n\n      default :\n        result =\"Shouldnt Happen\";\n      break;\n    }\n    console.log(result);\n    return result;\n  }; \n\n  switchNextWorkflowStatus = async() =>{\n    const { contract, accounts} = this.state;\n    let workflowStatusTemp = await contract.methods.workflowStatus().call({from: accounts[0]});\n\n    switch(+workflowStatusTemp){\n        case 0: \n          await contract.methods.startProposalsRegistering().send({from: accounts[0]});\n          \n        break;\n  \n        case 1: \n          await contract.methods.endProposalsRegistering().send({from: accounts[0]});\n        break;\n  \n        case 2: \n          await contract.methods.startVotingSession().send({from: accounts[0]});\n        break;\n  \n        case 3: \n          await contract.methods.endVotingSession().send({from: accounts[0]});\n        break;\n  \n        case 4: \n          await contract.methods.tallyVotes().send({from: accounts[0]});\n          let winningproposal = await contract.methods.winningProposalID().call({from: accounts[0]}); \n          let proposal = await this.getProposalWithParam(winningproposal); \n          let proposalToString = 'Proposal ID : '+winningproposal+\" / Description : \"+ proposal[0]+ \" / Vote Count : \"+ proposal[1];\n          this.setState({winner:proposalToString});\n        break;\n  \n        default :\n          console.log(\"Shouldnt Happen\");\n        break;\n\n    }\n\n          workflowStatusTemp = await contract.methods.workflowStatus().call({from: accounts[0]});\n          workflowStatusTemp = this.convertWorkflowStatus(workflowStatusTemp);\n          console.log(workflowStatusTemp);\n          this.setState({workflowStatus:workflowStatusTemp});\n  };\n\n  getVoter = async() => {\n    const { accounts, contract } = this.state;\n    let address = document.getElementById(\"getVoterAddress\").value;\n\n    if(address){\n      try{\n        let voter = await contract.methods.getVoter(address).call({from: accounts[0]});\n        console.log('Voter Address : '+address+\" / isRegistered : \"+ voter[0]+ \" / hasVoted : \"+ voter[1]+\" / Voted Proposal ID : \"+ voter[2]);\n        window.alert('Voter Address : '+address+\" / isRegistered : \"+ voter[0]+ \" / hasVoted : \"+ voter[1]+\" / Voted Proposal ID : \"+ voter[2])\n      }\n      catch(error){\n        const stringError = error.message;\n  \n        if(stringError.indexOf(\"You're not a voter\") !== -1){\n          this.state.isVoter = false;\n        }\n\n      }\n    }\n  }\n\n  setVote = async() => {\n    const { accounts, contract } = this.state;\n    let id=document.getElementById(\"voteForID\").value;\n\n    if(id){\n      await contract.methods.setVote(id).send({from: accounts[0]});\n      console.log(\"voted\");\n      this.refreshProposalList();\n    }\n  }\n\n  addVoter = async() => {\n    const { accounts, contract } = this.state;\n    let address=document.getElementById(\"addVoterAddress\").value;\n\n    if(address){\n      await contract.methods.addVoter(address).send({from: accounts[0]});\n      console.log(\"added voter\");\n\n      if(address===accounts[0]){\n        this.setState({isVoter:true});\n      }\n    }\n  }\n\n  addProposal = async() => {\n    const { accounts, contract } = this.state;\n    let proposal=document.getElementById(\"proposal\").value;\n\n    if(proposal){\n      await contract.methods.addProposal(proposal).send({from: accounts[0]});\n      console.log(\"added proposal\");\n    }\n  }\n\n  getProposal = async() => {\n    const { accounts, contract } = this.state;\n    let proposalID=document.getElementById(\"proposalID\").value;\n\n    if(proposalID){\n      try{\n        let proposal = await contract.methods.getOneProposal(proposalID).call({from: accounts[0]});\n        console.log(proposal);\n        window.alert('Proposal ID : '+proposalID+\" / Description : \"+ proposal[0]+ \" / Vote Count : \"+ proposal[1])\n\n        return proposal;\n      }\n      catch(error){\n        const stringError = error.message;\n  \n        if(stringError.indexOf(\"You're not a voter\") !== -1){\n        }\n\n      }\n    }\n  }\n\n  getProposalWithParam = async(proposalID) => {\n    const { accounts, contract } = this.state;\n    if(proposalID){\n      try{\n        let proposal = await contract.methods.getOneProposal(proposalID).call({from: accounts[0]});\n        console.log(proposal);\n\n        return proposal;\n      }\n      catch(error){\n        const stringError = error.message;\n  \n        if(stringError.indexOf(\"You're not a voter\") !== -1){\n        }\n\n      }\n    }\n  }\n\n  refreshProposalList = async() => {\n    const { contract} = this.state;\n    \n    let options = {\n      fromBlock: 0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\n      toBlock: 'latest'\n    };\n\n    let proposalEvents = await contract.getPastEvents('ProposalRegistered', options);\n    console.table(proposalEvents);\n\n    let proposalArray = [];\n\n    for (let i = 0; i < proposalEvents.length; i++) {\n      let proposalID = proposalEvents[i].returnValues[0];\n      let proposal = await this.getProposalWithParam(proposalID);\n      const arrayElement = [proposalID,proposal[0],proposal[1]];\n      proposalArray.push(arrayElement);\n      console.table(arrayElement);\n    }\n    proposalEvents.forEach(async element => {\n      \n    });\n    console.table(proposalArray);\n\n    this.setState({proposals:proposalArray});\n  }\n\n  \n \n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    const isAdminRenderHello =(\n      <div className=\"IsAdmin\" >\n        <p>Owner connected   \n        </p>\n        <hr></hr>\n      </div>\n    );\n\n    const addVoterRender = (\n        <div className=\"AddVoter\" >\n          <p>Owner, Go add Voter plz !!         \n            <br />\n            <hr></hr>\n            <input type=\"text\" id=\"addVoterAddress\" placeholder=\"Voter Address\"/>\n            <br />\n            <br />\n            <button onClick={this.addVoter} >Add Voter</button>\n            <hr></hr>\n          </p>\n        </div>\n    );\n    const getVoterRender = (\n    <div className=\"GetVoter\" >\n          <p> Get your voter =&nbsp;         \n            <input type=\"text\" id=\"getVoterAddress\" placeholder=\"Voter Address\"/>\n            <br></br>\n            <br></br>\n            <button onClick={this.getVoter}>Get Voter</button>\n            <hr></hr>\n          </p>\n        </div>\n    );\n\n    // const testComponent = (\n    //   <div className=\"Proposal\" >\n    //       <Proposal id={0} description={\"test\"} voterCount={\"0\"}></Proposal>\n    //   </div>\n    // );\n\n    const setVoteRender =(\n      <div className=\"SetVote\" >\n            <p>Enter an ID to vote =&nbsp; \n            <input type=\"text\" id=\"voteForID\" placeholder=\"Proposal ID\"/>\n            <br></br>\n            <br></br>\n            <button onClick={this.setVote}>Vote</button> \n            <hr></hr>   \n            </p>\n          </div>\n    );\n\n    const isVoterRenderHello = (\n        <div className=\"isAVoter\" >\n          <p>You're a Voter ! <hr></hr>\n\n          </p>\n        </div>\n    );\n\n    const addProposalRender = (\n          <div className=\"AddProposal\" >\n            <p>Proposal =&nbsp;\n            <input type=\"text\" id=\"proposal\" placeholder=\"proposal description\"/>\n            <br></br>\n            <br></br>\n            <button onClick={this.addProposal}>Add Proposal</button> \n            \n            <hr></hr>   \n            </p>\n          </div>\n    );\n\n    const getProposalRender = (\n          <div className=\"GetProposal\" >\n              <p> Get your proposal =&nbsp;\n              <input type=\"text\" id=\"proposalID\" placeholder=\"proposal ID\"/>\n              <br></br>\n              <br></br>\n              <button onClick={this.getProposal}>Get Proposal</button> \n              <hr></hr>  \n              </p>\n          </div>\n    );\n\n    const testMap = (\n      <div className=\"ProposalMap\" >\n          {this.state.proposals && this.state.proposals.map((proposal) => (\n            <Proposal id={proposal[0]} description={proposal[1]} voterCount={proposal[2]}></Proposal>\n          ))}\n      </div>\n    );\n\n    const refreshButton = (\n      <div className=\"Refresh\" >\n            <button onClick={this.refreshProposalList}>Refresh List</button>  \n            <br></br>\n            <br></br>  \n      </div>\n    );\n\n    const workflowButton = (\n      <div className=\"WorkflowButton\" >\n              <button onClick={this.switchNextWorkflowStatus}>Next Step</button> \n              <hr></hr> \n      </div>\n    );\n\n    const showwinner = (\n      <div className=\"showwinner\" >\n        <hr></hr> \n              <h2>The winning proposal is :  {this.state.winner}</h2>  \n      </div>\n    );\n\n    return(\n      <div className=\"App\" >\n          <div className=\"Top\">\n                <p className=\"Title\">Dapp Voting System 3.0</p>\n                <hr></hr>\n                <p className=\"MetamaskAccount\"> Metamask account logged : {this.state.connectedAccount}</p>\n                <hr></hr>\n          </div>\n\n          <div className=\"WorkflowStatus\" >\n            <p>\n              WorkflowStatus : {this.state.workflowStatus}      \n            </p>\n            <hr></hr>\n          </div>\n\n        {this.state.isAdmin ? isAdminRenderHello : <div></div>}\n        {this.state.isAdmin ? workflowButton : <div></div>}\n        {this.state.isVoter ? isVoterRenderHello : <div></div>}\n        \n\n        {this.state.isAdmin && this.state.workflowStatus === \"RegisteringVoters\" ? addVoterRender : <div></div>}\n        {this.state.isVoter && this.state.workflowStatus === \"ProposalsRegistrationStarted\" ? addProposalRender : <div></div>}\n        {this.state.isVoter && this.state.workflowStatus === \"VotingSessionStarted\"  ? setVoteRender : <div></div>}\n\n        {this.state.isVoter ? getProposalRender : <div></div>}\n        {this.state.isVoter ? getVoterRender : <div></div>}\n        {this.state.isVoter ? refreshButton : <div></div>}\n        {this.state.isVoter ? testMap : <div></div>}\n\n        {this.state.workflowStatus === \"VotesTallied\"  ? showwinner : <div></div>}\n\n        {this.proposals}\n\n      </div>\n    );    \n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}